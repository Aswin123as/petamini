import { useState, useEffect } from 'react';
import {
  TrendingUp,
  Link2,
  Clock,
  Flame,
  ExternalLink,
  Tag,
  Loader2,
} from 'lucide-react';
import {
  linkerService,
  Linker as BackendLinker,
} from '@/services/linkerService';

interface LinkPreview {
  title: string | null;
  description: string | null;
  image: string | null;
  logo: string | null;
}

interface Link extends Omit<BackendLinker, 'id'> {
  id: string;
  promoted: boolean;
  preview: LinkPreview | null;
  previewLoading: boolean;
}

// Get Telegram user data
const getTelegramUser = () => {
  if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
    const user = window.Telegram.WebApp.initDataUnsafe?.user;
    if (user) {
      return {
        id: user.id,
        username: user.username || user.first_name || 'User',
      };
    }
  }
  return null;
};

export default function LinkSharingApp() {
  const [links, setLinks] = useState<Link[]>([]);
  const [inputText, setInputText] = useState('');
  const [inputTags, setInputTags] = useState('');
  const [sortBy, setSortBy] = useState<'recent' | 'popular'>('recent');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [submitting, setSubmitting] = useState(false);

  const telegramUser = getTelegramUser();

  // Fetch linkers from backend
  useEffect(() => {
    loadLinkers();
  }, [sortBy]);

  const loadLinkers = async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await linkerService.getAllLinkers(sortBy);

      // Convert backend data to frontend format
      const convertedLinks: Link[] = data.map((linker) => ({
        ...linker,
        promoted: telegramUser
          ? linker.promotedBy.includes(telegramUser.id)
          : false,
        preview: null,
        previewLoading: linker.type === 'url',
      }));

      setLinks(convertedLinks);
    } catch (err) {
      console.error('Error loading linkers:', err);
      setError('Failed to load posts. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const fetchLinkPreview = async (url: string, linkId: number) => {
    try {
      const apiUrl = `https://api.microlink.io/?url=${encodeURIComponent(url)}`;
      const response = await fetch(apiUrl);
      const data = await response.json();

      if (data.status === 'success') {
        setLinks((prevLinks) =>
          prevLinks.map((link) =>
            link.id === linkId
              ? {
                  ...link,
                  preview: {
                    title: data.data.title || null,
                    description: data.data.description || null,
                    image: data.data.image?.url || null,
                    logo: data.data.logo?.url || null,
                  },
                  previewLoading: false,
                }
              : link
          )
        );
      } else {
        setLinks((prevLinks) =>
          prevLinks.map((link) =>
            link.id === linkId
              ? { ...link, preview: null, previewLoading: false }
              : link
          )
        );
      }
    } catch (error) {
      setLinks((prevLinks) =>
        prevLinks.map((link) =>
          link.id === linkId
            ? { ...link, preview: null, previewLoading: false }
            : link
        )
      );
    }
  };

  useEffect(() => {
    links.forEach((link) => {
      if (link.type === 'url' && link.previewLoading && !link.preview) {
        fetchLinkPreview(link.content, link.id);
      }
    });
  }, [links]);

  const isUrl = (text: string) => {
    const urlPattern =
      /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/;
    return (
      urlPattern.test(text) ||
      text.includes('.com') ||
      text.includes('.org') ||
      text.includes('.net') ||
      text.includes('.io') ||
      text.includes('.dev') ||
      text.includes('.co')
    );
  };

  const handleSubmit = () => {
    const trimmedText = inputText.trim();

    if (!trimmedText) {
      return;
    }

    let content = trimmedText;
    let type: 'url' | 'text' = 'text';

    if (isUrl(trimmedText)) {
      type = 'url';
      if (
        !trimmedText.startsWith('http://') &&
        !trimmedText.startsWith('https://')
      ) {
        content = 'https://' + trimmedText;
      }
    }

    // Process tags
    const tags = inputTags
      .split(',')
      .map((tag) => tag.trim().toLowerCase())
      .filter((tag) => tag.length > 0);

    const newLink: Link = {
      id: Date.now(),
      content: content,
      type: type,
      promotions: 0,
      promoted: false,
      timestamp: new Date().toISOString(),
      preview: null,
      previewLoading: type === 'url',
      tags: tags,
    };

    setLinks([newLink, ...links]);
    setInputText('');
    setInputTags('');
  };

  const handlePromote = (id: number) => {
    setLinks(
      links.map((link) => {
        if (link.id === id) {
          if (link.promoted) {
            return {
              ...link,
              promotions: link.promotions - 1,
              promoted: false,
            };
          } else {
            return { ...link, promotions: link.promotions + 1, promoted: true };
          }
        }
        return link;
      })
    );
  };

  const getSortedLinks = () => {
    const sorted = [...links];
    if (sortBy === 'popular') {
      return sorted.sort((a, b) => b.promotions - a.promotions);
    }
    return sorted.sort(
      (a, b) =>
        new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
    );
  };

  const getTimeAgo = (timestamp: string) => {
    const seconds = Math.floor(
      (new Date().getTime() - new Date(timestamp).getTime()) / 1000
    );
    if (seconds < 60) return 'just now';
    const minutes = Math.floor(seconds / 60);
    if (minutes < 60) return `${minutes}m ago`;
    const hours = Math.floor(minutes / 60);
    if (hours < 24) return `${hours}h ago`;
    const days = Math.floor(hours / 24);
    return `${days}d ago`;
  };

  const getDomain = (url: string) => {
    try {
      const urlObj = new URL(url);
      return urlObj.hostname.replace('www.', '');
    } catch {
      return url;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-2xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-2xl font-semibold text-gray-900 mb-1">Links</h1>
          <p className="text-sm text-gray-600">Share and discover links</p>
        </div>

        {/* Input Box */}
        <div className="mb-6">
          <div className="bg-white border border-gray-200 rounded-lg p-4">
            <textarea
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyPress={(e) => {
                if (e.key === 'Enter' && e.ctrlKey) {
                  handleSubmit();
                }
              }}
              placeholder="Share a link or write something..."
              rows={4}
              className="w-full px-0 py-0 text-sm text-gray-900 placeholder-gray-400 border-0 focus:outline-none focus:ring-0 resize-none"
            />
            <div className="mt-3 pt-3 border-t border-gray-100">
              <div className="flex items-center gap-2 mb-3">
                <Tag size={14} className="text-gray-400" />
                <input
                  type="text"
                  value={inputTags}
                  onChange={(e) => setInputTags(e.target.value)}
                  placeholder="Add tags (comma separated)..."
                  className="flex-1 px-0 py-0 text-xs text-gray-900 placeholder-gray-400 border-0 focus:outline-none focus:ring-0"
                />
              </div>
              <div className="flex justify-between items-center">
                <span className="text-xs text-gray-400">
                  Press Ctrl+Enter to post
                </span>
                <button
                  onClick={handleSubmit}
                  className="px-4 py-2 text-sm font-medium text-white bg-gray-900 rounded-md hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-900 focus:ring-offset-2 transition-colors"
                >
                  Post
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Sort Tabs */}
        <div className="flex gap-1 mb-4 border-b border-gray-200">
          <button
            onClick={() => setSortBy('recent')}
            className={`flex items-center gap-1.5 px-3 py-2 text-sm font-medium transition-colors ${
              sortBy === 'recent'
                ? 'text-gray-900 border-b-2 border-gray-900'
                : 'text-gray-600 hover:text-gray-900'
            }`}
          >
            <Clock size={16} />
            Recent
          </button>
          <button
            onClick={() => setSortBy('popular')}
            className={`flex items-center gap-1.5 px-3 py-2 text-sm font-medium transition-colors ${
              sortBy === 'popular'
                ? 'text-gray-900 border-b-2 border-gray-900'
                : 'text-gray-600 hover:text-gray-900'
            }`}
          >
            <Flame size={16} />
            Popular
          </button>
        </div>

        {/* Links List */}
        <div className="space-y-3">
          {getSortedLinks().map((link) => (
            <div
              key={link.id}
              className="bg-white border border-gray-200 rounded-lg p-4 hover:border-gray-300 transition-colors"
            >
              <div className="flex items-start gap-3">
                <button
                  onClick={() => handlePromote(link.id)}
                  className={`flex flex-col items-center gap-0.5 min-w-[40px] group ${
                    link.promoted ? 'opacity-100' : 'opacity-70'
                  }`}
                >
                  <div
                    className={`w-8 h-8 flex items-center justify-center rounded transition-colors ${
                      link.promoted ? 'bg-blue-50' : 'hover:bg-gray-100'
                    }`}
                  >
                    <TrendingUp
                      className={`transition-colors ${
                        link.promoted
                          ? 'text-blue-600'
                          : 'text-gray-500 group-hover:text-blue-600'
                      }`}
                      size={18}
                    />
                  </div>
                  <span
                    className={`text-xs font-medium ${
                      link.promoted ? 'text-blue-600' : 'text-gray-700'
                    }`}
                  >
                    {link.promotions}
                  </span>
                </button>

                <div className="flex-1 min-w-0">
                  {link.type === 'url' ? (
                    <div>
                      {link.previewLoading ? (
                        <div className="animate-pulse">
                          <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                          <div className="h-3 bg-gray-200 rounded w-1/2"></div>
                        </div>
                      ) : link.preview ? (
                        <a
                          href={link.content}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="block group"
                        >
                          <div className="border border-gray-200 rounded-lg hover:border-gray-300 transition-colors p-2">
                            <div className="flex items-start gap-3">
                              {link.preview.image && (
                                <img
                                  src={link.preview.image}
                                  alt={link.preview.title || 'Preview'}
                                  className="w-16 h-16 object-cover rounded flex-shrink-0"
                                  onError={(e) => {
                                    (
                                      e.target as HTMLImageElement
                                    ).style.display = 'none';
                                  }}
                                />
                              )}
                              <div className="flex-1 min-w-0">
                                <div className="flex items-start gap-2 mb-1">
                                  {link.preview.logo && (
                                    <img
                                      src={link.preview.logo}
                                      alt="Logo"
                                      className="w-3 h-3 rounded mt-0.5"
                                      onError={(e) => {
                                        (
                                          e.target as HTMLImageElement
                                        ).style.display = 'none';
                                      }}
                                    />
                                  )}
                                  <div className="flex-1 min-w-0">
                                    <div className="text-xs font-medium text-gray-900 group-hover:text-blue-600 transition-colors line-clamp-1">
                                      {link.preview.title ||
                                        getDomain(link.content)}
                                    </div>
                                    {link.preview.description && (
                                      <p className="text-xs text-gray-500 mt-0.5 line-clamp-1">
                                        {link.preview.description}
                                      </p>
                                    )}
                                    <div className="flex items-center gap-1 mt-1">
                                      <ExternalLink
                                        size={12}
                                        className="text-gray-400"
                                      />
                                      <span className="text-xs text-gray-500 truncate">
                                        {getDomain(link.content)}
                                      </span>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </a>
                      ) : (
                        <a
                          href={link.content}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="block group"
                        >
                          <div className="border border-gray-200 rounded-lg p-4 hover:border-gray-300 transition-colors bg-gray-50">
                            <div className="flex items-center gap-2 mb-2">
                              <Link2
                                size={16}
                                className="text-gray-400 flex-shrink-0"
                              />
                              <span className="text-xs text-gray-500 truncate">
                                {getDomain(link.content)}
                              </span>
                            </div>
                            <div className="text-sm text-gray-900 group-hover:text-blue-600 transition-colors break-all">
                              {link.content}
                            </div>
                          </div>
                        </a>
                      )}
                    </div>
                  ) : (
                    <div>
                      <div className="text-sm text-gray-900 break-words">
                        {link.content}
                      </div>
                    </div>
                  )}

                  {/* Tags */}
                  {link.tags && link.tags.length > 0 && (
                    <div className="flex flex-wrap gap-1.5 mt-2">
                      {link.tags.map((tag, index) => (
                        <span
                          key={index}
                          className="inline-flex items-center px-2 py-0.5 rounded-md text-xs font-medium bg-gray-100 text-gray-700 hover:bg-gray-200 transition-colors"
                        >
                          #{tag}
                        </span>
                      ))}
                    </div>
                  )}

                  <div className="mt-2 text-xs text-gray-500">
                    {getTimeAgo(link.timestamp)}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        {links.length === 0 && (
          <div className="text-center py-12 text-gray-500 text-sm">
            No links yet. Post the first one!
          </div>
        )}
      </div>
    </div>
  );
}

export { LinkSharingApp as LinkersPage };
